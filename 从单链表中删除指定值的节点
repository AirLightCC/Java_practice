题目描述
输入一个单向链表和一个节点的值，从单向链表中删除等于该值的节点，删除后如果链表中无节点则返回空指针。 
链表结点定义如下： 
struct ListNode 
{ 
int       m_nKey; 
ListNode* m_pNext; 
}; 
详细描述： 
本题为考察链表的插入和删除知识。 
链表的值不能重复 
构造过程，例如 
1 <- 2 
3 <- 2 
5 <- 1 
4 <- 5 
7 <- 2 
最后的链表的顺序为 2 7 3 1 5 4 
删除 结点 2 
则结果为 7 3 1 5 4 


输入描述:
1 输入链表结点个数
2 输入头结点的值
3 按照格式插入各个结点
4 输入要删除的结点的值
输出描述:
输出删除结点后的序列，每个数后都要加空格
示例1 
输入
5
2
3 2
4 3
5 2
1 4
3
输出
2 5 4 1 

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        while (in.hasNextInt()) {
            int n = in.nextInt();
            Node head = new Node(in.nextInt());
            for (int i = 0; i < n - 1; i++) {
                head.addNode(in.nextInt(), in.nextInt());
            }
            
            int k = in.nextInt();
            Node node = head;
            for (int i = 0; i < n; i++){
                if (node.num != k) {
                    System.out.print(node.num + " ");
                }
                if (i != n - 1) {
                    node = node.next;
                }
                else {
                    System.out.println();
                }
            }
        }
    }
}

class Node {
    int num;
    Node next;
    
    public Node() {
        
    }
    
    public Node(int num) {
        this.num = num;
    }
    
    public void addNode(int num, int compareNum) {
        if (this.num == compareNum) {
            Node node = new Node(num);
            if (next == null) {
                next = node;
            }
            else {
                node.next = next;
                next = node;
            }
        }
        else {
            next.addNode(num, compareNum);
        }
    }

}
